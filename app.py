import streamlit as st
import pandas as pd
import joblib

# Load d·ªØ li·ªáu phim
st.write("üîÑ ƒêang load d·ªØ li·ªáu IMDb...")
titles_df = pd.read_csv("title.basics.csv", sep='\t', na_values='\\N')
ratings_df = pd.read_csv("title.ratings.csv", sep='\t')
movies_df = pd.merge(titles_df, ratings_df, on='tconst')
movies_df = movies_df[(movies_df['titleType'] == 'movie') & (movies_df['averageRating'].notnull())]
movies_df = movies_df[['primaryTitle', 'genres', 'startYear', 'averageRating', 'numVotes']]
st.write("‚úÖ ƒê√£ load d·ªØ li·ªáu!")

# Load m√¥ h√¨nh ML
model = joblib.load('sentiment_model.joblib')
vectorizer = joblib.load('tfidf_vectorizer.joblib')

# H√†m g·ª£i √Ω phim
def recommend_movies(user_mood, movies_df, num_recommend=10):
    user_mood = user_mood.lower()
    if user_mood in ['vui', 'positive', 'h√†i h∆∞·ªõc', 'h·∫°nh ph√∫c']:
        recommended = movies_df.sort_values(by='averageRating', ascending=False).head(num_recommend)
    elif user_mood in ['bu·ªìn', 'negative', 'sad']:
        drama_movies = movies_df[movies_df['genres'].str.contains('Drama', na=False)]
        recommended = drama_movies.sort_values(by='averageRating', ascending=False).head(num_recommend)
    elif user_mood in ['h√†nh ƒë·ªông', 'action']:
        action_movies = movies_df[movies_df['genres'].str.contains('Action', na=False)]
        recommended = action_movies.sort_values(by='averageRating', ascending=False).head(num_recommend)
    elif user_mood in ['kinh d·ªã', 'horror']:
        horror_movies = movies_df[movies_df['genres'].str.contains('Horror', na=False)]
        recommended = horror_movies.sort_values(by='averageRating', ascending=False).head(num_recommend)
    elif user_mood in ['t√¨nh c·∫£m', 'romance']:
        romance_movies = movies_df[movies_df['genres'].str.contains('Romance', na=False)]
        recommended = romance_movies.sort_values(by='averageRating', ascending=False).head(num_recommend)
    else:
        recommended = movies_df.sort_values(by='averageRating', ascending=False).head(num_recommend)

    return recommended[['primaryTitle', 'genres', 'startYear', 'averageRating']]

# Giao di·ªán web
st.title("üé¨ H·ªá th·ªëng G·ª£i √Ω Phim theo C·∫£m X√∫c")
st.write("üí° B·∫°n c√≥ th·ªÉ nh·∫≠p nh·∫≠n x√©t phim ho·∫∑c t√¢m tr·∫°ng ƒë·ªÉ nh·∫≠n g·ª£i √Ω!")

option = st.radio("Ch·ªçn ph∆∞∆°ng th·ª©c:", ("Nh·∫≠p nh·∫≠n x√©t phim", "Nh·∫≠p t√¢m tr·∫°ng tr·ª±c ti·∫øp"))

if option == "Nh·∫≠p nh·∫≠n x√©t phim":
    review_text = st.text_area("‚úèÔ∏è Nh·∫≠p nh·∫≠n x√©t phim:")
    if st.button("üì¢ D·ª± ƒëo√°n & G·ª£i √Ω phim"):
        if review_text.strip() != "":
            X_input = vectorizer.transform([review_text])
            pred = model.predict(X_input)[0]
            st.write(f"üîç D·ª± ƒëo√°n c·∫£m x√∫c: **{pred}**")
            suggestions = recommend_movies(pred, movies_df, num_recommend=10)
            st.write("üé• G·ª£i √Ω phim:")
            st.dataframe(suggestions)
        else:
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p nh·∫≠n x√©t phim!")
else:
    mood = st.text_input("üß† H√¥m nay b·∫°n ƒëang c√≥ t√¢m tr·∫°ng g√¨ (vui, bu·ªìn, h√†nh ƒë·ªông, kinh d·ªã, t√¨nh c·∫£m...)?")
    if st.button("üé• G·ª£i √Ω phim"):
        if mood.strip() != "":
            suggestions = recommend_movies(mood, movies_df, num_recommend=10)
            st.write("üé• G·ª£i √Ω phim:")
            st.dataframe(suggestions)
        else:
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√¢m tr·∫°ng c·ªßa b·∫°n!")

st.write("---")
st.write("‚ú® Made with ‚ù§Ô∏è by Your Team")
